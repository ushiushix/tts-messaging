# Welcome to Serverless!
#
# This file is the main config file for your service.
# It's very minimal at this point and uses default values.
# You can always add more config options for more control.
# We've included some commented out config examples here.
# Just uncomment any of them to get that config option.
#
# For full config options, check the docs:
#    docs.serverless.com
#
# Happy Coding!

custom:
  prefix: ushiushix
  remover:
    buckets:
      - ${self:custom.prefix}-ttsmsg
service: ${self:custom.prefix}-tts-messaging

# You can pin your service to only deploy with a specific Serverless version
# Check out our docs for more details
# frameworkVersion: "=X.X.X"

provider:
  name: aws
  runtime: nodejs6.10
  region: us-west-2
  stage: dev
  memorySize: 128
  logRetentionInDays: 7
  iamRoleStatements:
    - Effect: "Allow"
      Action:
        - "s3:*"
      Resource:
        - arn:aws:s3:::${self:custom.prefix}-ttsmsg
        - arn:aws:s3:::${self:custom.prefix}-ttsmsg/*
    - Effect: "Allow"
      Action:
        - "polly:*"
      Resource: "*"
  environment:
    BUCKET: ${self:custom.prefix}-ttsmsg
    REGION: ${self:provider.region}

package:
  exclude:
    - '**~'

functions:
  list_audio:
    handler: functions/audio_lister.handler
    events:
      - http:
          path: audios
          method: get
          cors: true
          private: false
  put_message:
    handler: functions/put_message.handler
    events:
      - http:
          path: messages
          method: post
          cors: true
          private: false
  generate:
    handler: functions/tts_generator.handler
    events:
      - s3:
          bucket: tts
          event: s3:ObjectCreated:*
          rules:
            - prefix: messages/
            - suffix: .txt

resources:
  Resources:
    S3BucketTts:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: ${self:custom.prefix}-ttsmsg
        AccessControl: PublicRead
        WebsiteConfiguration:
          IndexDocument: index.html
          ErrorDocument: 404.html
    GenerateLambdaPermissionTtsS3:
      Type: AWS::Lambda::Permission
      Properties:
        FunctionName:
          "Fn::GetAtt":
            - GenerateLambdaFunction
        Principal: s3.amazonaws.com
        Action: lambda:InvokeFunction
        SourceAccount:
          Ref: AWS::AccountId
        SourceArn: arn:aws:s3:::${self:custom.prefix}-ttsmsg

plugins:
  - serverless-s3-remover
